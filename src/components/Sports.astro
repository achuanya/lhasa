---
import IconBike from "@/assets/icons/IconBike.svg";
import IconRunner from "@/assets/icons/IconRunner.svg";
import "../styles/sports.css";
---
  
<div class="container mx-auto max-w-[736px]">
  <div id="totalActivities">
      <div id="totalTitle" class="total-title"></div>
      <div id="totalCount" class="total-count">
          <span id="ridingTimeThisYearValue">0</span>
          <div class="loading-spinner"></div>
      </div>
      <div id="totalLabel" class="total-label">骑行总公里数</div>
      <div id="milesRiddenThisYear" class="total-distance">
          <span id="milesRiddenThisYearValue">0</span>
          <div class="loading-spinner"></div>
      </div>
  </div>
  <div id="calendar-wrapper" class="calendar-wrapper relative">
    <button id="calendar-prev-btn" class="calendar-nav-btn prev-btn hidden absolute left-0 top-1/2 -translate-y-1/2 z-10 bg-background/70 hover:bg-background/90 p-2 rounded-full shadow-md">
        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-chevron-left"><path d="m15 18-6-6 6-6"/></svg>
    </button>
    <div id="calendar" class="calendar"></div>
    <button id="calendar-next-btn" class="calendar-nav-btn next-btn hidden absolute right-0 top-1/2 -translate-y-1/2 z-10 bg-background/70 hover:bg-background/90 p-2 rounded-full shadow-md">
        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-chevron-right"><path d="m9 18 6-6-6-6"/></svg>
    </button>
  </div>
  <div class="sports">
      <div class="icon-container">
          <div class="icon-item">
              <div class="road_bike_color"></div>
              <IconBike class="icon-svg cycling" />
          </div>
          <div class="icon-item">
              <div class="running_color"></div>
              <IconRunner class="icon-svg running" />
          </div>
      </div>
      <div id="barChart" class="bar-chart"></div>
  </div>
</div>

<script is:inline data-astro-rerun>
(function() {
    // 单例模式存储 Sports 实例状态
    window.sportsInstance = window.sportsInstance || null;

    // 销毁现有实例
    function destroySports() {
        if (window.sportsInstance) {
            try {
                // 清理定时器和事件监听器
                if (window.sportsInstance.timers) {
                    window.sportsInstance.timers.forEach(timer => clearTimeout(timer));
                    window.sportsInstance.timers.forEach(timer => clearInterval(timer));
                }
                
                // 清理元素上的动画引用
                const ridingTimeElement = document.getElementById('ridingTimeThisYearValue');
                const milesElement = document.getElementById('milesRiddenThisYearValue');
                if (ridingTimeElement) {
                    if (ridingTimeElement._animationInterval) clearInterval(ridingTimeElement._animationInterval);
                    if (ridingTimeElement._animationTimeout) clearTimeout(ridingTimeElement._animationTimeout);
                }
                if (milesElement) {
                    if (milesElement._animationInterval) clearInterval(milesElement._animationInterval);
                    if (milesElement._animationTimeout) clearTimeout(milesElement._animationTimeout);
                }
                
                window.sportsInstance = null;
                console.log('Sports 实例已销毁');
            } catch (err) {
                console.error('销毁Sports失败:', err);
            }
        }
        
        // 清理主题观察器
        if (window._sportsThemeObserver) {
            window._sportsThemeObserver.disconnect();
            window._sportsThemeObserver = null;
        }
    }

    // 初始化 Sports 实例
    function initSports() {
        const calendarElement = document.getElementById('calendar');
        const barChartElement = document.getElementById('barChart');
        
        if (!calendarElement || !barChartElement) return;

        // 创建新实例
        window.sportsInstance = {
            timers: [],
            processedActivities: [],
            totalActivitiesDisplayed: false,
            allActivities: [], // To store all fetched activities
            currentCalendarOffsetWeeksBlocks: 0, // 0 for current, 1 for one 4-week block in past
            currentCalendarViewStartDate: null, // Start date of the current 4-week calendar view
        };

        // 为了数据的统一性,generateCalendar处理后赋值供全局使用
        // let processedActivities = []; // This is now part of window.sportsInstance

        const calendarWrapper = document.getElementById('calendar-wrapper');
        const prevCalBtn = document.getElementById('calendar-prev-btn');
        const nextCalBtn = document.getElementById('calendar-next-btn');


        // 日历
        function generateCalendar(activities, startDate, numWeeks, callback = null) {
            const calendarElement = document.getElementById('calendar');
            // 清空当前日历内容
            calendarElement.innerHTML = ''; 
            
            const daysOfWeek = ['一', '二', '三', '四', '五', '六', '日']; 
            daysOfWeek.forEach(day => {
                const dayElement = document.createElement('div');
                dayElement.className = 'calendar-week-header';
                dayElement.innerText = day;
                calendarElement.appendChild(dayElement);
            });

            const todayStr = getChinaTime().toISOString().split('T')[0];
            let currentDate = new Date(startDate);
            currentDate.setUTCHours(0, 0, 0, 0);

            // 清空处理过的活动数据
            // processedActivities = []; // Now using window.sportsInstance.processedActivities
            window.sportsInstance.processedActivities = [];
            let todayContainer = null;

            // 添加球的滚动动画
            function addBallRollAnimation(ball, container) {
                // 定义四个方向的起始位置和动画参数
                const directions = [
                    { name: 'top', x: '50%', y: '-80px', rotate: 0, duration: 600 },
                    { name: 'right', x: '150px', y: '50%', rotate: 90, duration: 700 },
                    { name: 'bottom', x: '50%', y: '150px', rotate: 180, duration: 650 },
                    { name: 'left', x: '-80px', y: '50%', rotate: 270, duration: 750 }
                ];
                
                // 随机选择一个方向
                const randomDirection = directions[Math.floor(Math.random() * directions.length)];
                
                // 设置初始位置（在容器外）
                ball.style.left = randomDirection.x;
                ball.style.top = randomDirection.y;
                ball.style.transform = `translate(-50%, -50%) rotate(${randomDirection.rotate}deg) scale(0.3)`;
                ball.style.transition = 'none';
                ball.style.opacity = '0';
                
                // 添加滚动动画类
                ball.classList.add('ball-rolling', `roll-from-${randomDirection.name}`);
                
                // 强制重绘
                ball.offsetHeight;
                
                // 延迟一点时间后开始动画
                setTimeout(() => {
                    const duration = randomDirection.duration;
                    ball.style.transition = `left ${duration}ms cubic-bezier(0.34, 1.56, 0.64, 1), top ${duration}ms cubic-bezier(0.34, 1.56, 0.64, 1), transform ${duration}ms cubic-bezier(0.34, 1.56, 0.64, 1), opacity ${duration * 0.3}ms ease-out`;
                    ball.style.left = '50%';
                    ball.style.top = '50%';
                    ball.style.opacity = '1';
                    
                    // 添加旋转和弹跳效果
                    const rotations = Math.floor(Math.random() * 2) + 1; // 1-2圈旋转
                    ball.style.transform = `translate(-50%, -50%) rotate(${randomDirection.rotate + (360 * rotations)}deg) scale(1)`;
                    
                    // 动画完成后移除滚动类
                    setTimeout(() => {
                        ball.classList.remove('ball-rolling', `roll-from-${randomDirection.name}`);
                        ball.style.transform = 'translate(-50%, -50%)';
                        ball.style.transition = 'opacity 0.3s ease, transform 0.5s ease';
                        // 确保球在动画完成后是可见的
                        ball.style.opacity = '1';
                    }, duration);
                }, Math.random() * 100 + 50); // 随机延迟50-150ms
            }

            // 创建日历
            function createDayContainer(date, activities) {
                const dayContainer = document.createElement('div');
                dayContainer.className = 'day-container';

                const dateNumber = document.createElement('span');
                dateNumber.className = 'date-number';
                dateNumber.innerText = date.getUTCDate();
                dayContainer.appendChild(dateNumber);

                const activity = activities.find(activity => activity.start_date_local === date.toISOString().split('T')[0]);
                if (activity) window.sportsInstance.processedActivities.push(activity);

                const ballSize = activity ? Math.min(parseFloat(activity.distance) / 4, 24) : 2;
                const ball = document.createElement('div');
                ball.className = 'activity-indicator';
                ball.style.width = `${ballSize}px`;
                ball.style.height = `${ballSize}px`;
                if (!activity) ball.classList.add('no-activity');
                
                dayContainer.appendChild(ball);
                addBallRollAnimation(ball, dayContainer);

                const isToday = date.toDateString() === new Date().toDateString();
                let isAnimating = true;

                if (isToday) {
                    dayContainer.classList.add('today');
                    todayContainer = dayContainer;
                    dateNumber.style.opacity = '0'; // Initially hidden for animation
                } else {
                    dateNumber.style.opacity = '0'; // Hidden for other days during ball animation
                }
                
                if (isToday) {
                    dayContainer.addEventListener('mouseenter', () => {
                        if (!isAnimating) {
                            dateNumber.style.opacity = '0';
                            ball.style.opacity = '1';
                        }
                    });
                    dayContainer.addEventListener('mouseleave', () => {
                        if (!isAnimating) {
                            dateNumber.style.opacity = '1';
                            ball.style.opacity = '0';
                        }
                    });
                } else {
                    dayContainer.addEventListener('mouseenter', () => {
                        if (!isAnimating) {
                            dateNumber.style.opacity = '1';
                            ball.style.opacity = '0';
                        }
                    });
                    dayContainer.addEventListener('mouseleave', () => {
                        if (!isAnimating) {
                            dateNumber.style.opacity = '0';
                            ball.style.opacity = '1';
                        }
                    });
                }

                const postAnimationTimer = setTimeout(() => {
                    isAnimating = false;
                    if (isToday) {
                        ball.style.opacity = '0'; // Hide ball for today's default
                        dateNumber.style.transition = 'opacity 0.5s ease-in-out 0.2s'; // Add transition for number
                        dateNumber.style.opacity = '1'; // Animate number in
                    } else {
                        dateNumber.style.opacity = '0'; // Ensure number hidden
                        ball.style.opacity = '1';   // Ensure ball visible
                    }
                }, 1000); 
                window.sportsInstance.timers.push(postAnimationTimer);
                return dayContainer;
            }

            // 异步显示,模仿打字机效果
            async function displayCalendar() {
                for (let week = 0; week < numWeeks; week++) {
                    for (let day = 0; day < 7; day++) {
                        const currentDateStr = currentDate.toISOString().split('T')[0];
                        // 不再计算超过今天的日期
                        if (currentDateStr > todayStr) return;
                        
                        const dayContainer = createDayContainer(currentDate, activities);
                        calendarElement.appendChild(dayContainer);

                        // 速度控制
                        await new Promise(resolve => {
                            const timer = setTimeout(resolve, 80);
                            window.sportsInstance.timers.push(timer);
                        });
                        currentDate.setUTCDate(currentDate.getUTCDate() + 1);
                    }
                }
            }
            // 显示日历并在结束后调用回调
            displayCalendar().then(() => {
                if (callback) callback();
            });
        }

        // 生成柱形图
        function generateBarChart() {
            const barChartElement = document.getElementById('barChart');
            if (!barChartElement) return;
            barChartElement.innerHTML = '';

            const viewStartDate = window.sportsInstance.currentCalendarViewStartDate;
            if (!viewStartDate) {
                console.error("Bar chart cannot be generated, viewStartDate is not set.");
                return;
            }

            const weeklyData = {};
            let currentWeekStartForIteration = new Date(viewStartDate);
            currentWeekStartForIteration.setUTCHours(0, 0, 0, 0);

            for (let i = 0; i < 4; i++) { // For the 4 weeks of the current calendar view
                const weekStart = new Date(currentWeekStartForIteration);
                const weekEnd = new Date(weekStart);
                weekEnd.setUTCDate(weekStart.getUTCDate() + 6);
                const weekKey = `${weekStart.toISOString().split('T')[0]} - ${weekEnd.toISOString().split('T')[0]}`;
                weeklyData[weekKey] = 0;
                currentWeekStartForIteration.setUTCDate(currentWeekStartForIteration.getUTCDate() + 7);
            }
            
            window.sportsInstance.processedActivities.forEach(activity => {
                const activityDate = new Date(activity.start_date_local);
                const weekStart = getWeekStartDate(activityDate); 
                const weekEnd = new Date(weekStart);
                weekEnd.setUTCDate(weekStart.getUTCDate() + 6);

                const weekKey = `${weekStart.toISOString().split('T')[0]} - ${weekEnd.toISOString().split('T')[0]}`;
                if (weeklyData[weekKey] !== undefined) {
                    weeklyData[weekKey] += parseFloat(activity.distance);
                }
            });

            const maxDistance = Math.max(...Object.values(weeklyData).filter(val => typeof val === 'number' && !isNaN(val)), 0);

            Object.keys(weeklyData).forEach(week => {
                const distance = weeklyData[week]; 
                const barContainer = document.createElement('div');
                barContainer.className = 'bar-container';

                const bar = document.createElement('div');
                bar.className = 'bar';

                const width = maxDistance > 0 ? (distance / maxDistance) * 190 : 0;
                // bar.style.setProperty('--bar-width', `${width}px`); // CSS var method
                
                const distanceText = document.createElement('div');
                distanceText.className = 'cycling-kilometer';
                distanceText.innerText = '0 km';

                const messageBox = createMessageBox();
                const clickMessageBox = createMessageBox();

                barContainer.style.position = 'relative';
                bar.appendChild(distanceText);
                barContainer.appendChild(bar);
                barContainer.appendChild(messageBox);
                barContainer.appendChild(clickMessageBox);
                barChartElement.appendChild(barContainer);
                
                bar.style.width = '0'; // Start animation from 0 width
                requestAnimationFrame(() => { // Ensure DOM is updated for transition
                    bar.style.transition = 'width 1s ease-out';
                    bar.style.width = `${width}px`;
                });

                distanceText.style.opacity = '1';
                animateText(distanceText, 0, distance, 1000, true);
                setupBarInteractions(bar, messageBox, clickMessageBox, distance);
            });
        }

        // 动态文本显示
        function animateText(element, startValue, endValue, duration, isDistance = false) {
            const startTime = performance.now();
            function update() {
                const elapsed = performance.now() - startTime;
                const progress = Math.min(elapsed / duration, 1);
                const currentValue = (progress * endValue).toFixed(2);
                element.innerText = isDistance ? `${currentValue} km` : `${currentValue}h`;
                if (progress < 1) {
                    requestAnimationFrame(update);
                } else {
                    element.innerText = isDistance ? `${endValue.toFixed(2)} km` : `${endValue.toFixed(2)}h`;
                }
            }
            update();
        }

        // 计算总公里数
        function calculateTotalKilometers(activities) {
            return activities.reduce((total, activity) => total + parseFloat(activity.distance) || 0, 0);
        }

        // 显示总活动数和总公里数
        function displayTotalActivities(activities) {
            // 防止重复执行
            if (window.sportsInstance.totalActivitiesDisplayed) return;
            window.sportsInstance.totalActivitiesDisplayed = true;
            
            // 全年骑行时长
            const ridingTimeThisYear = document.getElementById('totalCount');
            // 全年骑行公里数
            const milesRiddenThisYear = document.getElementById('milesRiddenThisYear');
            // 动态年标题《2025 骑行总时长》
            const totalTitleElement = document.getElementById('totalTitle');

            if (!ridingTimeThisYear || !milesRiddenThisYear || !totalTitleElement) return;

            const ridingTimeThisYearValue = ridingTimeThisYear.querySelector('#ridingTimeThisYearValue');
            const milesRiddenThisYearValue = milesRiddenThisYear.querySelector('#milesRiddenThisYearValue');

            const totalCountSpinner = ridingTimeThisYear.querySelector('.loading-spinner');
            const milesRiddenThisYearSpinner = milesRiddenThisYear.querySelector('.loading-spinner');

            totalCountSpinner.classList.add('active');
            milesRiddenThisYearSpinner.classList.add('active');

            const currentYear = new Date().getFullYear();
            totalTitleElement.textContent = `${currentYear} 骑行总时长`;

            // 筛选全年活动数据
            const filteredActivities = activities.filter(activity => {
                const activityYear = new Date(activity.start_date_local).getFullYear();
                return activityYear === currentYear;
            });

            // 计算全年活动时间的总和（单位：小时）
            const totalMovingTime = filteredActivities.reduce((total, activity) => {
                return total + parseFloat(activity.moving_time) || 0;
            }, 0);

            // 计算全年总公里数
            const totalKilometers = calculateTotalKilometers(filteredActivities);

            // 动画效果
            animateCount(ridingTimeThisYearValue, totalMovingTime, 1000, 50, false);
            animateCount(milesRiddenThisYearValue, totalKilometers, 1000, 50, true);

            const timer = setTimeout(() => {
                console.log(totalKilometers.toFixed(2));
                ridingTimeThisYearValue.textContent = `${totalMovingTime.toFixed(2)} h`;
                milesRiddenThisYearValue.textContent = `${totalKilometers.toFixed(2)} km`;
                totalCountSpinner.classList.remove('active');
                milesRiddenThisYearSpinner.classList.remove('active');
            }, 1000);
            window.sportsInstance.timers.push(timer);
        }

        // 获取一周的开始日期
        function getWeekStartDate(date) {
            const day = date.getDay();
            const diff = (day === 0 ? -6 : 1) - day;
            const weekStart = new Date(date);
            weekStart.setDate(weekStart.getDate() + diff);
            return weekStart;
        }

        // 获取中国时间 UTC+8
        function getChinaTime() {
            const now = new Date();
            const offset = 8 * 60 * 60 * 1000;
            return new Date(now.getTime() + offset);
        }

        // 手搓JSON
        async function loadActivityData() {
            const response = await fetch('https://cos.lhasa.icu/assets/strava_data.json');
            return response.json();
        }

        // 创建消息框
        function createMessageBox() {
            const messageBox = document.createElement('div');
            messageBox.className = 'message-box';
            return messageBox;
        }

        // 获取起始时间（从周一开始）
        function getStartDate(today, daysOffset) {
            const currentDayOfWeek = today.getUTCDay();
            const daysToMonday = (currentDayOfWeek === 0 ? 6 : currentDayOfWeek - 1);
            const startDate = new Date(today);
            startDate.setUTCDate(today.getUTCDate() - daysToMonday - daysOffset);
            return startDate;
        }

        // 动态更新计数器
        function animateCount(element, totalValue, duration, intervalDuration, isDistance = false) {
            // 清除可能存在的之前的动画
            if (element._animationInterval) {
                clearInterval(element._animationInterval);
            }
            if (element._animationTimeout) {
                clearTimeout(element._animationTimeout);
            }
            
            const step = totalValue / (duration / intervalDuration);
            let count = 0;
            
            const interval = setInterval(() => {
                count += step;
                if (count >= totalValue) {
                    count = totalValue;
                    clearInterval(interval);
                    element._animationInterval = null;
                    // 确保最终值正确
                    element.textContent = isDistance ? `${totalValue.toFixed(2)} km` : `${totalValue.toFixed(2)} h`;
                } else {
                    element.textContent = isDistance ? `${count.toFixed(2)} km` : `${count.toFixed(2)} h`;
                }
            }, intervalDuration);
            
            // 存储引用以便清理
            element._animationInterval = interval;
            window.sportsInstance.timers.push(interval);
        }

        // 柱形图交互
        function setupBarInteractions(bar, messageBox, clickMessageBox, weeklyData) {
            let mouseLeaveTimeout;
            let autoHideTimeout;

            bar.addEventListener('mouseenter', () => {
                clearTimeout(mouseLeaveTimeout);
                clearTimeout(autoHideTimeout);

                const message = weeklyData > 70 ? '骑行出发吧！' : '偷懒了';
                messageBox.innerText = message;
                messageBox.classList.add('show');

                autoHideTimeout = setTimeout(() => {
                    messageBox.classList.remove('show');
                }, 700);
                window.sportsInstance.timers.push(autoHideTimeout);
            });

            bar.addEventListener('mouseleave', () => {
                mouseLeaveTimeout = setTimeout(() => {
                    messageBox.classList.remove('show');
                }, 700);
                window.sportsInstance.timers.push(mouseLeaveTimeout);
            });

            bar.addEventListener('click', () => {
                clickMessageBox.innerText = '你也感兴趣吗';
                clickMessageBox.classList.add('show');
                const timer = setTimeout(() => {
                    clickMessageBox.classList.remove('show');
                }, 700);
                window.sportsInstance.timers.push(timer);

                messageBox.classList.remove('show');
                clearTimeout(mouseLeaveTimeout);
                clearTimeout(autoHideTimeout);
            });
        }

        // 加载数据并生成日历
        (async function() {
            // const today = getChinaTime(); // Moved to triggerCalendarAndChartRender
            // const startDate = getStartDate(today, 21); // Moved to triggerCalendarAndChartRender

            try {
                const activities = await loadActivityData();
                window.sportsInstance.allActivities = activities;
                
                await displayTotalActivitiesFirst(activities); // Runs once
                await triggerCalendarAndChartRender(true); // Initial render with animations

                setupCalendarPaginationControls(); // Setup controls after first render
                
                console.log('Sports 初始化完成');
            } catch (error) {
                console.error('加载运动数据失败:', error);
            }
        })();

        function setupCalendarPaginationControls() {
            if (!calendarWrapper || !prevCalBtn || !nextCalBtn || !window.sportsInstance) return;
        
            calendarWrapper.addEventListener('mouseenter', () => {
                if (!window.sportsInstance) return;
                prevCalBtn.classList.remove('hidden');
                if (window.sportsInstance.currentCalendarOffsetWeeksBlocks > 0) {
                    nextCalBtn.classList.remove('hidden');
                }
            });
        
            calendarWrapper.addEventListener('mouseleave', () => {
                prevCalBtn.classList.add('hidden');
                nextCalBtn.classList.add('hidden');
            });
        
            prevCalBtn.addEventListener('click', async () => {
                if (!window.sportsInstance) return;
                window.sportsInstance.currentCalendarOffsetWeeksBlocks++;
                await triggerCalendarAndChartRender(false); // Not initial load
            });
        
            nextCalBtn.addEventListener('click', async () => {
                if (!window.sportsInstance) return;
                if (window.sportsInstance.currentCalendarOffsetWeeksBlocks > 0) {
                    window.sportsInstance.currentCalendarOffsetWeeksBlocks--;
                    await triggerCalendarAndChartRender(false); // Not initial load
                }
            });
        }

        function updatePaginationButtonsState() {
            if (!nextCalBtn || !prevCalBtn || !window.sportsInstance) return;
        
            if (window.sportsInstance.currentCalendarOffsetWeeksBlocks === 0) {
                nextCalBtn.classList.add('opacity-50', 'cursor-not-allowed', 'pointer-events-none');
                nextCalBtn.disabled = true;
                 // Hide next button explicitly if mouse is not over wrapper
                if (!calendarWrapper.matches(':hover')) { // Check if mouse is NOT over wrapper
                    nextCalBtn.classList.add('hidden');
                }
            } else {
                nextCalBtn.classList.remove('opacity-50', 'cursor-not-allowed', 'pointer-events-none');
                nextCalBtn.disabled = false;
                // If mouse is over wrapper, it might be shown by mouseenter logic
            }
            // prevCalBtn is generally always enabled unless a max historical limit is set
            prevCalBtn.classList.remove('opacity-50', 'cursor-not-allowed', 'pointer-events-none');
            prevCalBtn.disabled = false;
        }
        

        async function triggerCalendarAndChartRender(isInitialLoad = false) {
            if (!window.sportsInstance) return;
            const today = getChinaTime();
            const daysToShift = window.sportsInstance.currentCalendarOffsetWeeksBlocks * 28; // 4 weeks per block
            const currentDaysOffset = 21 + daysToShift;
            
            const viewStartDate = getStartDate(today, currentDaysOffset);
            window.sportsInstance.currentCalendarViewStartDate = viewStartDate;
        
            const calendarEl = document.getElementById('calendar');
            const barChartEl = document.getElementById('barChart');
            if (calendarEl) calendarEl.innerHTML = ''; // Clear previous content
            if (barChartEl) barChartEl.innerHTML = ''; // Clear previous content
        
            await generateCalendarWithDelay(window.sportsInstance.allActivities, viewStartDate, 4, isInitialLoad);
            await generateBarChartWithDelay(isInitialLoad);
            updatePaginationButtonsState();
        }


        // 首先显示总活动数据（左侧）
        async function displayTotalActivitiesFirst(activities) {
            return new Promise((resolve) => {
                // 确保所有组件都是初始隐藏状态
                const totalActivities = document.getElementById('totalActivities');
                const calendar = document.getElementById('calendar');
                const sports = document.querySelector('.sports');
                
                if (totalActivities) totalActivities.classList.remove('loaded');
                if (calendar) calendar.classList.remove('loaded');
                if (sports) sports.classList.remove('loaded');
                
                // 显示总活动数据
                if (totalActivities) {
                    totalActivities.classList.add('loaded');
                }
                
                displayTotalActivities(activities);
                
                // 等待动画完成后继续
                setTimeout(resolve, 800);
            });
        }

        // 带延迟的日历生成（中间）
        async function generateCalendarWithDelay(activities, startDate, numWeeks, isInitialLoad = false) {
            return new Promise((resolve) => {
                const calendar = document.getElementById('calendar');
                if (calendar) {
                    calendar.classList.add('loaded');
                }
                const delay = isInitialLoad ? 800 : 50; // Shorter delay for pagination
                
                setTimeout(() => {
                     if (window.sportsInstance) { // Ensure instance exists
                        generateCalendar(activities, startDate, numWeeks, resolve);
                     } else {
                         resolve(); // Resolve if instance is gone
                     }
                }, delay);
            });
        }

        // 带延迟的柱形图生成（右侧）
        async function generateBarChartWithDelay(isInitialLoad = false) {
            return new Promise((resolve) => {
                const sports = document.querySelector('.sports');
                if (sports) {
                    sports.classList.add('loaded');
                }
                const delay = isInitialLoad ? 300 : 50; // Shorter delay for pagination
                
                setTimeout(() => {
                    if (window.sportsInstance) { // Ensure instance exists
                        generateBarChart();
                    }
                    resolve();
                }, delay);
            });
        }
    }

    // 页面生命周期管理
    function handlePageLoad() {
        destroySports();
        initSports();
    }

    // 主题切换处理
    function handleThemeChange() {
        console.log('主题切换，重新初始化 Sports 组件');
        destroySports();
        // 延迟一点时间确保 CSS 变量已更新
        setTimeout(() => {
            initSports();
        }, 50);
    }

    // 单次绑定事件监听
    function setupSports() {
        if (window._sportsInitialized) return;
        window._sportsInitialized = true;

        // 页面切换事件
        document.addEventListener('astro:before-swap', destroySports);
        document.addEventListener('astro:after-swap', handlePageLoad);

        // 监听主题切换
        const observer = new MutationObserver((mutations) => {
            mutations.forEach((mutation) => {
                if (mutation.type === 'attributes' && mutation.attributeName === 'data-theme') {
                    handleThemeChange();
                }
            });
        });

        // 观察 html 元素的 data-theme 属性变化
        observer.observe(document.documentElement, {
            attributes: true,
            attributeFilter: ['data-theme']
        });

        // 存储观察器以便清理
        window._sportsThemeObserver = observer;

        // 初始加载
        if (document.readyState === 'complete') {
            handlePageLoad();
        } else {
            document.addEventListener('DOMContentLoaded', handlePageLoad);
        }
    }

    setupSports();
})();
</script>